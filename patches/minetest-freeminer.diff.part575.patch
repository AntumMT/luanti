diff -ruN minetest-master/src/voxel.cpp minetest-freeminer/src/voxel.cpp
--- minetest-master/src/voxel.cpp	2016-09-03 16:15:52.665779000 -0700
+++ minetest-freeminer/src/voxel.cpp	2016-09-03 15:43:59.986741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+voxel.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "voxel.h"
@@ -27,9 +30,6 @@
 /*
 	Debug stuff
 */
-u32 addarea_time = 0;
-u32 emerge_time = 0;
-u32 emerge_load_time = 0;
 u32 clearflag_time = 0;
 //u32 getwaterpressure_time = 0;
 //u32 spreadwaterpressure_time = 0;
@@ -52,8 +52,10 @@
 {
 	// Reset area to volume=0
 	m_area = VoxelArea();
-	delete[] m_data;
+	if(m_data)
+		delete m_data;
 	m_data = NULL;
+	if(m_flags)
 	delete[] m_flags;
 	m_flags = NULL;
 }
@@ -146,7 +148,7 @@
 	if(m_area.contains(area))
 		return;
 
-	TimeTaker timer("addArea", &addarea_time);
+	TimeTaker timer("addArea");
 
 	// Calculate new area
 	VoxelArea new_area;
@@ -174,10 +176,14 @@
 	dstream<<std::endl;*/
 
 	// Allocate new data and clear flags
-	MapNode *new_data = new MapNode[new_size];
-	assert(new_data);
+	MapNode *new_data = reinterpret_cast<MapNode*>( ::operator new(new_size * sizeof(MapNode)));
+	if (!CONTENT_IGNORE)
+		memset(new_data, 0, new_size * sizeof(MapNode));
+	else
+		for(s32 i=0; i<new_size; i++)
+			new_data[i] = MapNode(CONTENT_IGNORE);
+
 	u8 *new_flags = new u8[new_size];
-	assert(new_flags);
 	memset(new_flags, VOXELFLAG_NO_DATA, new_size);
 
 	// Copy old data
@@ -207,8 +213,10 @@
 	m_data = new_data;
 	m_flags = new_flags;
 
-	delete[] old_data;
-	delete[] old_flags;
+	if(old_data)
+		delete old_data;
+	if(old_flags)
+		delete[] old_flags;
 
 	//dstream<<"addArea done"<<std::endl;
 }
@@ -286,7 +294,7 @@
 void VoxelManipulator::clearFlag(u8 flags)
 {
 	// 0-1ms on moderate area
-	TimeTaker timer("clearFlag", &clearflag_time);
+	//TimeTaker timer("clearFlag", &clearflag_time);
 
 	//v3s16 s = m_area.getExtent();
 
