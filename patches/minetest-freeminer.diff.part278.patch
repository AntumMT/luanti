diff -ruN minetest-master/src/guiPasswordChange.cpp minetest-freeminer/src/guiPasswordChange.cpp
--- minetest-master/src/guiPasswordChange.cpp	2016-09-03 16:15:52.465778000 -0700
+++ minetest-freeminer/src/guiPasswordChange.cpp	2016-09-03 15:43:59.858740000 -0700
@@ -1,19 +1,24 @@
 /*
-Part of Minetest
+guiPasswordChange.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 Copyright (C) 2013 Ciaran Gultnieks <ciaran@ciarang.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-Permission to use, copy, modify, and distribute this software for any
-purpose with or without fee is hereby granted, provided that the above
-copyright notice and this permission notice appear in all copies.
-
-THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Freeminer  is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "guiPasswordChange.h"
@@ -27,6 +32,7 @@
 #include <IGUIFont.h>
 
 #include "gettext.h"
+#include "util/string.h"
 
 const int ID_oldPassword = 256;
 const int ID_newPassword1 = 257;
@@ -80,86 +86,87 @@
 	*/
 	removeChildren();
 
+	const static double gui_scaling = g_settings->getFloat("hud_scaling"); // gui_scaling here or get from pixel ratio
 	/*
 		Calculate new sizes and positions
 	*/
 	core::rect<s32> rect(
-			screensize.X/2 - 580/2,
-			screensize.Y/2 - 300/2,
-			screensize.X/2 + 580/2,
-			screensize.Y/2 + 300/2
+			screensize.X/2 - 580/2/gui_scaling,
+			screensize.Y/2 - 300/2/gui_scaling,
+			screensize.X/2 + 580/2/gui_scaling,
+			screensize.Y/2 + 300/2/gui_scaling
 	);
 
 	DesiredRect = rect;
 	recalculateAbsolutePosition(false);
 
 	v2s32 size = rect.getSize();
-	v2s32 topleft_client(40, 0);
+	v2s32 topleft_client(40/gui_scaling, 0);
 
 	const wchar_t *text;
 
 	/*
 		Add stuff
 	*/
-	s32 ypos = 50;
+	s32 ypos = 50/gui_scaling;
 	{
-		core::rect<s32> rect(0, 0, 150, 20);
+		core::rect<s32> rect(0, 0, 150/gui_scaling, 20/gui_scaling);
 		rect += topleft_client + v2s32(25, ypos+6);
 		text = wgettext("Old Password");
 		Environment->addStaticText(text, rect, false, true, this, -1);
 		delete[] text;
 	}
 	{
-		core::rect<s32> rect(0, 0, 230, 30);
+		core::rect<s32> rect(0, 0, 230/gui_scaling, 30/gui_scaling);
 		rect += topleft_client + v2s32(160, ypos);
 		gui::IGUIEditBox *e =
 		Environment->addEditBox(L"", rect, true, this, ID_oldPassword);
 		Environment->setFocus(e);
 		e->setPasswordBox(true);
 	}
-	ypos += 50;
+	ypos += 50/gui_scaling;
 	{
-		core::rect<s32> rect(0, 0, 150, 20);
+		core::rect<s32> rect(0, 0, 150/gui_scaling, 20/gui_scaling);
 		rect += topleft_client + v2s32(25, ypos+6);
 		text = wgettext("New Password");
 		Environment->addStaticText(text, rect, false, true, this, -1);
 		delete[] text;
 	}
 	{
-		core::rect<s32> rect(0, 0, 230, 30);
+		core::rect<s32> rect(0, 0, 230/gui_scaling, 30/gui_scaling);
 		rect += topleft_client + v2s32(160, ypos);
 		gui::IGUIEditBox *e =
 		Environment->addEditBox(L"", rect, true, this, ID_newPassword1);
 		e->setPasswordBox(true);
 	}
-	ypos += 50;
+	ypos += 50/gui_scaling;
 	{
-		core::rect<s32> rect(0, 0, 150, 20);
+		core::rect<s32> rect(0, 0, 150/gui_scaling, 20/gui_scaling);
 		rect += topleft_client + v2s32(25, ypos+6);
 		text = wgettext("Confirm Password");
 		Environment->addStaticText(text, rect, false, true, this, -1);
 		delete[] text;
 	}
 	{
-		core::rect<s32> rect(0, 0, 230, 30);
+		core::rect<s32> rect(0, 0, 230/gui_scaling, 30/gui_scaling);
 		rect += topleft_client + v2s32(160, ypos);
 		gui::IGUIEditBox *e =
 		Environment->addEditBox(L"", rect, true, this, ID_newPassword2);
 		e->setPasswordBox(true);
 	}
 
-	ypos += 50;
+	ypos += 50/gui_scaling;
 	{
-		core::rect<s32> rect(0, 0, 140, 30);
+		core::rect<s32> rect(0, 0, 140/gui_scaling, 30/gui_scaling);
 		rect = rect + v2s32(size.X/2-140/2, ypos);
 		text = wgettext("Change");
 		Environment->addButton(rect, this, ID_change, text);
 		delete[] text;
 	}
 
-	ypos += 50;
+	ypos += 50/gui_scaling;
 	{
-		core::rect<s32> rect(0, 0, 300, 20);
+		core::rect<s32> rect(0, 0, 300/gui_scaling, 20/gui_scaling);
 		rect += topleft_client + v2s32(35, ypos);
 		text = wgettext("Passwords do not match!");
 		IGUIElement *e =
@@ -210,6 +217,9 @@
 
 bool GUIPasswordChange::OnEvent(const SEvent& event)
 {
+	if (GUIModalMenu::OnEvent(event))
+		return true;
+
 	if(event.EventType==EET_KEY_INPUT_EVENT)
 	{
 		if(event.KeyInput.Key==KEY_ESCAPE && event.KeyInput.PressedDown)
