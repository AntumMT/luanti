diff -ruN minetest-master/src/log_types.cpp minetest-freeminer/src/log_types.cpp
--- minetest-master/src/log_types.cpp	1969-12-31 16:00:00.000000000 -0800
+++ minetest-freeminer/src/log_types.cpp	2016-09-03 15:43:59.730739000 -0700
@@ -0,0 +1,72 @@
+/*
+This file is part of Freeminer.
+
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Freeminer  is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "log_types.h"
+
+std::ostream & operator<<(std::ostream & s, v2POS p) {
+	s << "(" << p.X << "," << p.Y << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, v2s32 p) {
+	s << "(" << p.X << "," << p.Y << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, v2f p) {
+	s << "(" << p.X << "," << p.Y << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, v3POS p) {
+	s << "(" << p.X << "," << p.Y << "," << p.Z << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, v3f p) {
+	s << "(" << p.X << "," << p.Y << "," << p.Z << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, std::map<v3POS, unsigned int> & p) {
+	for (auto & i: p)
+		s << i.first << "=" << i.second<<" ";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, irr::video::SColor c) {
+	s << "c32(" << c.color << ": a=" << c.getAlpha()<< ",r=" << c.getRed()<< ",g=" << c.getGreen()<< ",b=" << c.getBlue() << ")";
+	return s;
+}
+
+std::ostream & operator<<(std::ostream & s, irr::video::SColorf c) {
+	s << "cf32(" << "a=" << c.getAlpha()<< ",r=" << c.getRed()<< ",g=" << c.getGreen()<< ",b=" << c.getBlue() << ")";
+	return s;
+}
+
+#include "util/string.h"
+std::ostream & operator<<(std::ostream & s, const std::wstring & w) {
+	s << wide_to_narrow(w);
+	return s;
+}
+
+#include "json/json.h"
+Json::StyledWriter writer;
+std::ostream & operator<<(std::ostream & s, Json::Value & json) {
+	s << writer.write(json);
+	return s;
+}
