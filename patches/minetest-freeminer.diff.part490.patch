diff -ruN minetest-master/src/script/lua_api/l_util.cpp minetest-freeminer/src/script/lua_api/l_util.cpp
--- minetest-master/src/script/lua_api/l_util.cpp	2016-09-03 16:15:52.525778000 -0700
+++ minetest-freeminer/src/script/lua_api/l_util.cpp	2016-09-03 15:43:59.642739000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+script/lua_api/l_util.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "lua_api/l_util.h"
@@ -130,6 +133,32 @@
 	return 1;
 }
 
+// setting_setjson(name, value)
+int ModApiUtil::l_setting_setjson(lua_State *L)
+{
+	NO_MAP_LOCK_REQUIRED;
+	const char *name = luaL_checkstring(L, 1);
+	Json::Value root;
+	read_json_value(L, root, 2);
+	g_settings->setJson(name, root);
+	return 0;
+}
+
+// setting_getjson(name[, nullvalue])
+int ModApiUtil::l_setting_getjson(lua_State *L)
+{
+	NO_MAP_LOCK_REQUIRED;
+	const char *name = luaL_checkstring(L, 1);
+	Json::Value root = g_settings->getJson(name);
+	lua_pushnil(L);
+	auto nullindex = lua_gettop(L);
+	if (!push_json_value(L, root, nullindex)) {
+		errorstream << "Failed to parse json data: \"" << root << "\"" << std::endl;
+		lua_pushnil(L);
+	}
+	return 1;
+}
+
 // setting_save()
 int ModApiUtil::l_setting_save(lua_State *L)
 {
@@ -471,6 +500,8 @@
 	API_FCT(setting_get);
 	API_FCT(setting_setbool);
 	API_FCT(setting_getbool);
+	API_FCT(setting_setjson);
+	API_FCT(setting_getjson);
 	API_FCT(setting_save);
 
 	API_FCT(parse_json);
