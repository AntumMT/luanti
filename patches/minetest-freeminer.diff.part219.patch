diff -ruN minetest-master/src/database-dummy.cpp minetest-freeminer/src/database-dummy.cpp
--- minetest-master/src/database-dummy.cpp	2016-09-03 16:15:52.589779000 -0700
+++ minetest-freeminer/src/database-dummy.cpp	2016-09-03 15:43:59.742740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+database-dummy.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /*
@@ -23,37 +26,34 @@
 
 #include "database-dummy.h"
 
-
 bool Database_Dummy::saveBlock(const v3s16 &pos, const std::string &data)
 {
-	m_database[getBlockAsInteger(pos)] = data;
+	m_database.set(getBlockAsString(pos), data);
 	return true;
 }
 
 void Database_Dummy::loadBlock(const v3s16 &pos, std::string *block)
 {
-	s64 i = getBlockAsInteger(pos);
-	std::map<s64, std::string>::iterator it = m_database.find(i);
-	if (it == m_database.end()) {
+	auto i = getBlockAsString(pos);
+	auto lock = m_database.lock_shared_rec();
+	auto it = m_database.find(i);
+	if (it == m_database.end())
 		*block = "";
 		return;
-	}
-
 	*block = it->second;
 }
 
 bool Database_Dummy::deleteBlock(const v3s16 &pos)
 {
-	m_database.erase(getBlockAsInteger(pos));
+	m_database.erase(getBlockAsString(pos));
 	return true;
 }
 
 void Database_Dummy::listAllLoadableBlocks(std::vector<v3s16> &dst)
 {
 	dst.reserve(m_database.size());
-	for (std::map<s64, std::string>::const_iterator x = m_database.begin();
-			x != m_database.end(); ++x) {
-		dst.push_back(getIntegerAsBlock(x->first));
+	for(auto &x : m_database) {
+		dst.push_back(getStringAsBlock(x.first));
 	}
 }
 
