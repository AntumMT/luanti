diff -ruN minetest-master/src/util/thread.h minetest-freeminer/src/util/thread.h
--- minetest-master/src/util/thread.h	2016-09-03 16:15:52.609779000 -0700
+++ minetest-freeminer/src/util/thread.h	2016-09-03 15:43:59.938741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+util/thread.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef UTIL_THREAD_HEADER
@@ -26,6 +29,7 @@
 #include "../threading/mutex_auto_lock.h"
 #include "porting.h"
 #include "log.h"
+#include "../threading/thread_pool.h"
 
 template<typename T>
 class MutexedVariable {
@@ -192,17 +196,17 @@
 	MutexedQueue<GetRequest<Key, T, Caller, CallerData> > m_queue;
 };
 
-class UpdateThread : public Thread
+class UpdateThread : public thread_pool
 {
 public:
-	UpdateThread(const std::string &name) : Thread(name + "Update") {}
+	UpdateThread(const std::string &name) : thread_pool(name + "Update") {}
 	~UpdateThread() {}
 
 	void deferUpdate() { m_update_sem.post(); }
 
 	void stop()
 	{
-		Thread::stop();
+		thread_pool::stop();
 
 		// give us a nudge
 		m_update_sem.post();
@@ -210,17 +214,21 @@
 
 	void *run()
 	{
+		porting::setThreadPriority(30);
+
 		DSTACK(FUNCTION_NAME);
 		BEGIN_DEBUG_EXCEPTION_HANDLER
 
 		while (!stopRequested()) {
-			m_update_sem.wait();
+			EXCEPTION_HANDLER_BEGIN;
+			m_update_sem.wait(1000);
 			// Set semaphore to 0
 			while (m_update_sem.wait(0));
 
 			if (stopRequested()) break;
 
 			doUpdate();
+			EXCEPTION_HANDLER_END;
 		}
 
 		END_DEBUG_EXCEPTION_HANDLER
