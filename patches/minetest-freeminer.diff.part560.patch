diff -ruN minetest-master/src/util/pointer.h minetest-freeminer/src/util/pointer.h
--- minetest-master/src/util/pointer.h	2016-09-03 16:15:52.581779000 -0700
+++ minetest-freeminer/src/util/pointer.h	2016-09-03 15:43:59.738740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+util/pointer.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef UTIL_POINTER_HEADER
@@ -284,7 +287,8 @@
 private:
 	void drop()
 	{
-		assert((*refcount) > 0);
+		if((*refcount) == 0)
+			return; //whoops
 		(*refcount)--;
 		if(*refcount == 0)
 		{
@@ -304,5 +308,21 @@
 	return b;
 }
 
+template<class T>
+class sloppy {}; 
+
+// convert between T** and const T** 
+template<class T>
+class sloppy<T**>
+{
+    T** t;
+    public: 
+    sloppy(T** mt) : t(mt) {}
+    sloppy(const T** mt) : t(const_cast<T**>(mt)) {}
+
+    operator T** () const { return t; }
+    operator const T** () const { return const_cast<const T**>(t); }
+};
+
 #endif
 
