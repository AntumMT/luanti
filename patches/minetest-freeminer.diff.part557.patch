diff -ruN minetest-master/src/util/numeric.h minetest-freeminer/src/util/numeric.h
--- minetest-master/src/util/numeric.h	2016-09-03 16:15:52.433778000 -0700
+++ minetest-freeminer/src/util/numeric.h	2016-09-03 15:43:59.466738000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+util/numeric.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef UTIL_NUMERIC_HEADER
@@ -25,8 +28,10 @@
 #include "../irr_v2d.h"
 #include "../irr_v3d.h"
 #include "../irr_aabb3d.h"
+#include <algorithm>
 #include "../threading/mutex.h"
 #include <list>
+#include <cmath>
 #include <map>
 #include <vector>
 
@@ -342,8 +347,13 @@
 		if(m_accumulator < wanted_interval)
 			return false;
 		m_accumulator -= wanted_interval;
+		if (m_accumulator > wanted_interval*2)
+			m_accumulator = 0;
 		return true;
 	}
+	void run_next(float wanted_interval) {
+		m_accumulator = wanted_interval;
+	}
 protected:
 	float m_accumulator;
 };
@@ -399,6 +409,14 @@
     return value + by;
 }
 
+inline int radius_box(const v3s16 & a, const v3s16 & b) {
+	return std::max(std::max(std::abs((float)a.X - b.X), std::abs((float)a.Y - b.Y)), std::abs((float)a.Z - b.Z));
+}
+
+inline int radius_box(const v3f & a, const v3f & b) {
+	return std::max(std::max(std::fabs(a.X - b.X), std::fabs(a.Y - b.Y)), std::fabs(a.Z - b.Z));
+}
+
 inline bool is_power_of_two(u32 n)
 {
 	return n != 0 && (n & (n-1)) == 0;
