diff -ruN minetest-master/src/rollback.cpp minetest-freeminer/src/rollback.cpp
--- minetest-master/src/rollback.cpp	2016-09-03 16:15:52.453778000 -0700
+++ minetest-freeminer/src/rollback.cpp	2016-09-03 15:43:59.854740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+rollback.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "rollback.h"
@@ -29,7 +32,6 @@
 #include "util/string.h"
 #include "util/numeric.h"
 #include "inventorymanager.h" // deserializing InventoryLocations
-#include "sqlite3.h"
 #include "filesys.h"
 
 #define POINTS_PER_NODE (16.0)
@@ -117,6 +119,7 @@
 {
 	flush();
 
+#if USE_SQLITE3
 	FINALIZE_STATEMENT(stmt_insert);
 	FINALIZE_STATEMENT(stmt_replace);
 	FINALIZE_STATEMENT(stmt_select);
@@ -128,6 +131,7 @@
 	FINALIZE_STATEMENT(stmt_knownNode_insert);
 
 	SQLOK_ERRSTREAM(sqlite3_close(db), "Could not close db");
+#endif
 }
 
 
@@ -147,6 +151,7 @@
 
 int RollbackManager::getActorId(const std::string &name)
 {
+#if USE_SQLITE3
 	for (std::vector<Entity>::const_iterator iter = knownActors.begin();
 			iter != knownActors.end(); ++iter) {
 		if (iter->name == name) {
@@ -162,11 +167,15 @@
 	registerNewActor(id, name);
 
 	return id;
+#else
+	return 0;
+#endif
 }
 
 
 int RollbackManager::getNodeId(const std::string &name)
 {
+#if USE_SQLITE3
 	for (std::vector<Entity>::const_iterator iter = knownNodes.begin();
 			iter != knownNodes.end(); ++iter) {
 		if (iter->name == name) {
@@ -182,6 +191,9 @@
 	registerNewNode(id, name);
 
 	return id;
+#else
+	return 0;
+#endif
 }
 
 
@@ -213,6 +225,7 @@
 
 bool RollbackManager::createTables()
 {
+#if USE_SQLITE3
 	SQLOK(sqlite3_exec(db,
 		"CREATE TABLE IF NOT EXISTS `actor` (\n"
 		"	`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n"
@@ -254,6 +267,7 @@
 		NULL, NULL, NULL));
 	verbosestream << "SQL Rollback: SQLite3 database structure was created" << std::endl;
 
+#endif
 	return true;
 }
 
@@ -263,6 +277,7 @@
 	verbosestream << "RollbackManager: Database connection setup" << std::endl;
 
 	bool needs_create = !fs::PathExists(database_path);
+#if USE_SQLITE3
 	SQLOK(sqlite3_open_v2(database_path.c_str(), &db,
 			SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, NULL));
 
@@ -382,6 +397,7 @@
 		);
 	}
 	SQLOK(sqlite3_reset(stmt_knownNode_select));
+#endif
 
 	return needs_create;
 }
@@ -389,6 +405,7 @@
 
 bool RollbackManager::registerRow(const ActionRow & row)
 {
+#if USE_SQLITE3
 	sqlite3_stmt * stmt_do = (row.id) ? stmt_replace : stmt_insert;
 
 	bool nodeMeta = false;
@@ -469,9 +486,13 @@
 	SQLOK(sqlite3_reset(stmt_do));
 
 	return written == SQLITE_DONE;
+#else
+	return false;
+#endif
 }
 
 
+#if USE_SQLITE3
 const std::list<ActionRow> RollbackManager::actionRowsFromSelect(sqlite3_stmt* stmt)
 {
 	std::list<ActionRow> rows;
@@ -536,6 +557,7 @@
 
 	return rows;
 }
+#endif
 
 
 ActionRow RollbackManager::actionRowFromRollbackAction(const RollbackAction & action)
@@ -623,6 +645,7 @@
 
 const std::list<ActionRow> RollbackManager::getRowsSince(time_t firstTime, const std::string & actor)
 {
+#if USE_SQLITE3
 	sqlite3_stmt *stmt_stmt = actor.empty() ? stmt_select : stmt_select_withActor;
 	sqlite3_bind_int64(stmt_stmt, 1, firstTime);
 
@@ -634,12 +657,16 @@
 	sqlite3_reset(stmt_stmt);
 
 	return rows;
+#else
+	return std::list<ActionRow>();
+#endif
 }
 
 
 const std::list<ActionRow> RollbackManager::getRowsSince_range(
 		time_t start_time, v3s16 p, int range, int limit)
 {
+#if USE_SQLITE3
 
 	sqlite3_bind_int64(stmt_select_range, 1, start_time);
 	sqlite3_bind_int  (stmt_select_range, 2, static_cast<int>(p.X - range));
@@ -654,6 +681,10 @@
 	sqlite3_reset(stmt_select_range);
 
 	return rows;
+#else
+	return std::list<ActionRow>();
+#endif
+
 }
 
 
@@ -673,6 +704,7 @@
 
 void RollbackManager::migrate(const std::string & file_path)
 {
+#if USE_SQLITE3
 	std::cout << "Migrating from rollback.txt to rollback.sqlite." << std::endl;
 
 	std::ifstream fh(file_path.c_str(), std::ios::in | std::ios::ate);
@@ -791,6 +823,7 @@
 	std::cout
 		<< " Done: 100%                                  " << std::endl
 		<< "Now you can delete the old rollback.txt file." << std::endl;
+#endif
 }
 
 
@@ -913,6 +946,7 @@
 
 void RollbackManager::flush()
 {
+#if USE_SQLITE3
 	sqlite3_exec(db, "BEGIN", NULL, NULL, NULL);
 
 	std::list<RollbackAction>::const_iterator iter;
@@ -929,6 +963,7 @@
 
 	sqlite3_exec(db, "COMMIT", NULL, NULL, NULL);
 	action_todisk_buffer.clear();
+#endif
 }
 
 
