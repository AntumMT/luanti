diff -ruN minetest-master/src/noise.h minetest-freeminer/src/noise.h
--- minetest-master/src/noise.h	2016-09-03 16:15:52.717779000 -0700
+++ minetest-freeminer/src/noise.h	2016-09-03 15:44:00.022741000 -0700
@@ -1,37 +1,41 @@
 /*
- * Minetest
+noise.h
  * Copyright (C) 2010-2014 celeron55, Perttu Ahola <celeron55@gmail.com>
  * Copyright (C) 2010-2014 kwolekr, Ryan Kwolek <kwolekr@minetest.net>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification, are
- * permitted provided that the following conditions are met:
- *  1. Redistributions of source code must retain the above copyright notice, this list of
- *     conditions and the following disclaimer.
- *  2. Redistributions in binary form must reproduce the above copyright notice, this list
- *     of conditions and the following disclaimer in the documentation and/or other materials
- *     provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
+*/
+
+/*
+This file is part of Freeminer.
+
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Freeminer  is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
+*/
 
 #ifndef NOISE_HEADER
 #define NOISE_HEADER
 
+#include <atomic>
+
 #include "irr_v3d.h"
 #include "exceptions.h"
 #include "util/string.h"
 
 extern FlagDesc flagdesc_noiseparams[];
 
+float farscale(float scale, float z);
+float farscale(float scale, float x, float z);
+float farscale(float scale, float x, float y, float z);
+
 // Note: this class is not polymorphic so that its high level of
 // optimizability may be preserved in the common use case
 class PseudoRandom {
@@ -89,7 +93,8 @@
 	s32 randNormalDist(s32 min, s32 max, int num_trials=6);
 
 private:
-	u64 m_state;
+	std::atomic_ullong m_state;
+	//u64 m_state;
 	u64 m_inc;
 };
 
@@ -111,6 +116,11 @@
 	float lacunarity;
 	u32 flags;
 
+	float far_scale;
+	float far_spread;
+	float far_persist;
+	float far_lacunarity;
+
 	NoiseParams()
 	{
 		offset     = 0.0f;
@@ -121,11 +131,18 @@
 		persist    = 0.6f;
 		lacunarity = 2.0f;
 		flags      = NOISE_FLAG_DEFAULTS;
+
+		far_scale  = 1;
+		far_spread = 1;
+		far_persist = 1;
+		far_lacunarity = 1;
 	}
 
 	NoiseParams(float offset_, float scale_, v3f spread_, s32 seed_,
 		u16 octaves_, float persist_, float lacunarity_,
-		u32 flags_=NOISE_FLAG_DEFAULTS)
+		u32 flags_=NOISE_FLAG_DEFAULTS,
+		float far_scale_ = 1, float far_spread_ = 1, float far_persist_ = 1, float far_lacunarity_ = 1
+		)
 	{
 		offset     = offset_;
 		scale      = scale_;
@@ -135,7 +152,15 @@
 		persist    = persist_;
 		lacunarity = lacunarity_;
 		flags      = flags_;
+
+		far_scale  = far_scale_;
+		far_spread = far_spread_;
+		far_persist = far_persist_;
+		far_lacunarity = far_lacunarity_;
 	}
+
+	friend std::ostream & operator<<(std::ostream & os, NoiseParams & np);
+
 };
 
 
@@ -180,8 +205,8 @@
 		float *persistence_map=NULL)
 	{
 		return perlinMap2D(
-			x + xoff * np.spread.X,
-			y + yoff * np.spread.Y,
+			x + xoff * np.spread.X * farscale(np.far_spread, x, y),
+			y + yoff * np.spread.Y * farscale(np.far_spread, x, y),
 			persistence_map);
 	}
 
@@ -189,9 +214,9 @@
 		float z, float zoff, float *persistence_map=NULL)
 	{
 		return perlinMap3D(
-			x + xoff * np.spread.X,
-			y + yoff * np.spread.Y,
-			z + zoff * np.spread.Z,
+			x + xoff * np.spread.X * farscale(np.far_spread, x, y, z),
+			y + yoff * np.spread.Y * farscale(np.far_spread, x, y, z),
+			z + zoff * np.spread.Z * farscale(np.far_spread, x, y, z),
 			persistence_map);
 	}
 
