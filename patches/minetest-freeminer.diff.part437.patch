diff -ruN minetest-master/src/script/cpp_api/s_entity.cpp minetest-freeminer/src/script/cpp_api/s_entity.cpp
--- minetest-master/src/script/cpp_api/s_entity.cpp	2016-09-03 16:15:52.669779000 -0700
+++ minetest-freeminer/src/script/cpp_api/s_entity.cpp	2016-09-03 15:43:59.986741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+script/cpp_api/s_entity.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "cpp_api/s_entity.h"
@@ -24,12 +27,14 @@
 #include "common/c_converter.h"
 #include "common/c_content.h"
 
-bool ScriptApiEntity::luaentity_Add(u16 id, const char *name)
+bool ScriptApiEntity::luaentity_Add(u16 id, const char *name, bool force_usage)
 {
 	SCRIPTAPI_PRECHECKHEADER
 
+/*
 	verbosestream<<"scriptapi_luaentity_add: id="<<id<<" name=\""
 			<<name<<"\""<<std::endl;
+*/
 
 	// Get core.registered_entities[name]
 	lua_getglobal(L, "core");
@@ -40,7 +45,7 @@
 	// Should be a table, which we will use as a prototype
 	//luaL_checktype(L, -1, LUA_TTABLE);
 	if (lua_type(L, -1) != LUA_TTABLE){
-		errorstream<<"LuaEntity name \""<<name<<"\" not defined"<<std::endl;
+		infostream<<"LuaEntity name \""<<name<<"\" not defined"<<std::endl;
 		return false;
 	}
 	int prototype_table = lua_gettop(L);
@@ -78,7 +83,9 @@
 {
 	SCRIPTAPI_PRECHECKHEADER
 
+/*
 	verbosestream << "scriptapi_luaentity_activate: id=" << id << std::endl;
+*/
 
 	int error_handler = PUSH_ERROR_HANDLER(L);
 
@@ -106,7 +113,9 @@
 {
 	SCRIPTAPI_PRECHECKHEADER
 
+/*
 	verbosestream << "scriptapi_luaentity_rm: id=" << id << std::endl;
+*/
 
 	// Get core.luaentities table
 	lua_getglobal(L, "core");
@@ -197,6 +206,10 @@
 
 void ScriptApiEntity::luaentity_Step(u16 id, float dtime)
 {
+	RecursiveMutexAutoLock testscriptlock(m_luastackmutex, std::try_to_lock);
+	if (!testscriptlock.owns_lock())
+		return;
+
 	SCRIPTAPI_PRECHECKHEADER
 
 	//infostream<<"scriptapi_luaentity_step: id="<<id<<std::endl;
