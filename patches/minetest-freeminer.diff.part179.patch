diff -ruN minetest-master/src/clientmap.h minetest-freeminer/src/clientmap.h
--- minetest-master/src/clientmap.h	2016-09-03 16:15:52.521778000 -0700
+++ minetest-freeminer/src/clientmap.h	2016-09-03 15:43:59.882740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+clientmap.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef CLIENTMAP_HEADER
@@ -24,11 +27,14 @@
 #include "map.h"
 #include "camera.h"
 #include <set>
+#include <unordered_set>
+#include <vector>
 #include <map>
 
 struct MapDrawControl
 {
-	MapDrawControl():
+	MapDrawControl();
+/*
 		range_all(false),
 		wanted_range(0),
 		wanted_max_blocks(0),
@@ -37,18 +43,32 @@
 		farthest_drawn(0)
 	{
 	}
+*/
 	// Overrides limits by drawing everything
 	bool range_all;
 	// Wanted drawing range
 	float wanted_range;
 	// Maximum number of blocks to draw
-	u32 wanted_max_blocks;
+	//u32 wanted_max_blocks;
 	// Number of blocks rendered is written here by the renderer
 	u32 blocks_drawn;
 	// Number of blocks that would have been drawn in wanted_range
 	u32 blocks_would_have_drawn;
 	// Distance to the farthest block drawn
 	float farthest_drawn;
+
+	float farmesh;
+	int farmesh_step;
+
+	float fps;
+	float fps_avg;
+	float fps_wanted;
+	float drawtime_avg;
+
+	float fov;
+	float fov_add = 0;
+	float fov_want; // smooth change
+	//bool block_overflow;
 };
 
 class Client;
@@ -92,11 +112,6 @@
 		m_camera_offset = offset;
 	}
 
-	/*
-		Forcefully get a sector from somewhere
-	*/
-	MapSector * emergeSector(v2s16 p);
-
 	//void deSerializeSector(v2s16 p2d, std::istream &is);
 
 	/*
@@ -108,8 +123,10 @@
 	virtual void render()
 	{
 		video::IVideoDriver* driver = SceneManager->getVideoDriver();
-		driver->setTransform(video::ETS_WORLD, AbsoluteTransformation);
-		renderMap(driver, SceneManager->getSceneNodeRenderPass());
+		if (driver->getDriverType() != video::EDT_NULL) {
+			driver->setTransform(video::ETS_WORLD, AbsoluteTransformation);
+			renderMap(driver, SceneManager->getSceneNodeRenderPass());
+		}
 	}
 	
 	virtual const aabb3f &getBoundingBox() const
@@ -119,7 +136,7 @@
 	
 	void getBlocksInViewRange(v3s16 cam_pos_nodes, 
 		v3s16 *p_blocks_min, v3s16 *p_blocks_max);
-	void updateDrawList(video::IVideoDriver* driver);
+	void updateDrawList(video::IVideoDriver* driver, float dtime, unsigned int max_cycle_ms = 0);
 	void renderMap(video::IVideoDriver* driver, s32 pass);
 
 	int getBackgroundBrightness(float max_d, u32 daylight_factor,
@@ -127,15 +144,14 @@
 
 	void renderPostFx(CameraMode cam_mode);
 
+	// For debugging the status and position of MapBlocks
+	void renderBlockBoundaries(const std::map<v3POS, MapBlock*> & blocks);
+
 	// For debug printing
 	virtual void PrintInfo(std::ostream &out);
 	
-	// Check if sector was drawn on last render()
-	bool sectorWasDrawn(v2s16 p)
-	{
-		return (m_last_drawn_sectors.find(p) != m_last_drawn_sectors.end());
-	}
-	
+	MapDrawControl & getControl() { return m_control; }
+
 private:
 	Client *m_client;
 	
@@ -148,9 +164,15 @@
 	f32 m_camera_fov;
 	v3s16 m_camera_offset;
 
-	std::map<v3s16, MapBlock*> m_drawlist;
-	
-	std::set<v2s16> m_last_drawn_sectors;
+	std::atomic<concurrent_unordered_map<v3POS, MapBlockP, v3POSHash, v3POSEqual> *> m_drawlist;
+	concurrent_unordered_map<v3POS, MapBlockP, v3POSHash, v3POSEqual> m_drawlist_0;
+	concurrent_unordered_map<v3POS, MapBlockP, v3POSHash, v3POSEqual> m_drawlist_1;
+	int m_drawlist_current;
+	std::vector<std::pair<v3POS, int>> draw_nearest;
+public:
+	std::atomic_uint m_drawlist_last;
+	std::map<v3POS, MapBlock*> m_block_boundary;
+private:
 
 	bool m_cache_trilinear_filter;
 	bool m_cache_bilinear_filter;
