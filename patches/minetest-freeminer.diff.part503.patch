diff -ruN minetest-master/src/serverlist.h minetest-freeminer/src/serverlist.h
--- minetest-master/src/serverlist.h	2016-09-03 16:15:52.477778000 -0700
+++ minetest-freeminer/src/serverlist.h	2016-09-03 15:43:59.494738000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+serverlist.h
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>
@@ -25,26 +28,29 @@
 #ifndef SERVERLIST_HEADER
 #define SERVERLIST_HEADER
 
+#include "network/fm_lan.h"
+
 typedef Json::Value ServerListSpec;
 
 namespace ServerList
 {
+	extern lan_adv lan_adv_client;
+	void lan_get();
+	void lan_apply(std::vector<ServerListSpec> & servers);
+	bool lan_fresh();
+
 	std::vector<ServerListSpec> getLocal();
 	std::vector<ServerListSpec> getOnline();
 	bool deleteEntry(const ServerListSpec &server);
 	bool insert(const ServerListSpec &server);
 	std::vector<ServerListSpec> deSerialize(const std::string &liststring);
 	const std::string serialize(const std::vector<ServerListSpec> &serverlist);
-	std::vector<ServerListSpec> deSerializeJson(const std::string &liststring);
-	const std::string serializeJson(const std::vector<ServerListSpec> &serverlist);
-	#if USE_CURL
 	void sendAnnounce(const std::string &action, const u16 port,
 			const std::vector<std::string> &clients_names = std::vector<std::string>(),
 			const double uptime = 0, const u32 game_time = 0,
 			const float lag = 0, const std::string &gameid = "",
 			const std::string &mg_name = "",
 			const std::vector<ModSpec> &mods = std::vector<ModSpec>());
-	#endif
 } // ServerList namespace
 
 #endif
