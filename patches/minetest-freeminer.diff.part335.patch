diff -ruN minetest-master/src/mapblock_mesh.h minetest-freeminer/src/mapblock_mesh.h
--- minetest-master/src/mapblock_mesh.h	2016-09-03 16:15:52.437778000 -0700
+++ minetest-freeminer/src/mapblock_mesh.h	2016-09-03 15:43:59.466738000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+mapblock_mesh.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef MAPBLOCK_MESH_HEADER
@@ -25,42 +28,66 @@
 #include "voxel.h"
 #include <map>
 
+//#define MESH_ZEROCOPY //Exprimental, slower, needed for next farmesh
+
+
 class IGameDef;
+struct MapDrawControl;
+class Map;
 class IShaderSource;
 
 /*
 	Mesh making stuff
 */
 
+int getFarmeshStep(MapDrawControl& draw_control, const v3POS & player_pos, const v3POS & block_pos);
 
 class MapBlock;
 struct MinimapMapblock;
 
 struct MeshMakeData
 {
+#if defined(MESH_ZEROCOPY)
+	Map & m_vmanip;
+#else
 	VoxelManipulator m_vmanip;
+#endif
 	v3s16 m_blockpos;
 	v3s16 m_crack_pos_relative;
 	bool m_smooth_lighting;
 	bool m_show_hud;
 
 	IGameDef *m_gamedef;
+
 	bool m_use_shaders;
 	bool m_use_tangent_vertices;
 
+	int step;
+	int range;
+	bool no_draw;
+	unsigned int timestamp;
+	MapBlock * block;
+	Map & map;
+	MapDrawControl& draw_control;
+	bool debug;
+	bool filled;
+
 	MeshMakeData(IGameDef *gamedef, bool use_shaders,
-			bool use_tangent_vertices = false);
+			bool use_tangent_vertices,
+			Map & map_, MapDrawControl& draw_control_);
+	~MeshMakeData();
 
 	/*
 		Copy central data directly from block, and other data from
 		parent of block.
 	*/
-	void fill(MapBlock *block);
+	void fill(MapBlock *block_);
+	bool fill_data();
 
 	/*
 		Set up with only a single node at (1,1,1)
 	*/
-	void fillSingleNode(MapNode *node);
+	void fillSingleNode(MapNode *node, v3POS blockpos = v3POS(0,0,0));
 
 	/*
 		Set the (node) position of a crack
@@ -122,11 +149,27 @@
 			m_animation_force_timer--;
 	}
 	
-	void updateCameraOffset(v3s16 camera_offset);
+	bool updateCameraOffset(v3s16 camera_offset);
+
+
+	u32 getUsageTimer()
+	{
+		return m_usage_timer;
+	}
+	void incrementUsageTimer(float dtime)
+	{
+		m_usage_timer += dtime;
+	}
+
+	int step;
+	bool no_draw;
+	unsigned int timestamp;
 
 private:
 	scene::IMesh *m_mesh;
+public:
 	MinimapMapblock *m_minimap_mapblock;
+private:
 	IGameDef *m_gamedef;
 	video::IVideoDriver *m_driver;
 	ITextureSource *m_tsrc;
@@ -157,6 +200,8 @@
 	u32 m_last_daynight_ratio;
 	// For each meshbuffer, maps vertex indices to (day,night) pairs
 	std::map<u32, std::map<u32, std::pair<u8, u8> > > m_daynight_diffs;
+
+	u32 m_usage_timer;
 	
 	// Camera offset info -> do we have to translate the mesh?
 	v3s16 m_camera_offset;
