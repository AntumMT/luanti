diff -ruN minetest-master/src/util/container.h minetest-freeminer/src/util/container.h
--- minetest-master/src/util/container.h	2016-09-03 16:15:52.649779000 -0700
+++ minetest-freeminer/src/util/container.h	2016-09-03 15:43:59.974741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+util/container.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef UTIL_CONTAINER_HEADER
@@ -28,7 +31,9 @@
 #include <list>
 #include <vector>
 #include <map>
-#include <set>
+#include "../threading/lock.h"
+#include "unordered_map_hash.h"
+#include <unordered_set>
 #include <queue>
 
 /*
@@ -36,8 +41,7 @@
 */
 
 template<typename Value>
-class UniqueQueue
-{
+class UniqueQueue {
 public:
 
 	/*
@@ -73,7 +77,7 @@
 	}
 
 private:
-	std::set<Value> m_set;
+	std::unordered_set<Value, v3POSHash, v3POSEqual> m_set;
 	std::queue<Value> m_queue;
 };
 
@@ -121,6 +125,104 @@
 };
 
 
+/*
+Is fast at:
+- Returning value by id (very fast)
+- Returning id by value
+- Generating a new id for a value
+
+Is not able to:
+- Remove an id/value pair (is possible to implement but slow)
+*/
+template<typename T>
+class MutexedIdGenerator
+{
+public:
+	MutexedIdGenerator()
+	{
+	}
+
+	// Returns true if found
+	bool getValue(u32 id, T &value)
+	{
+		if(id == 0)
+			return false;
+		MutexAutoLock lock(m_mutex);
+		if(m_id_to_value.size() < id)
+			return false;
+		value = m_id_to_value[id-1];
+		return true;
+	}
+
+	// If id exists for value, returns the id.
+	// Otherwise generates an id for the value.
+	u32 getId(const T &value)
+	{
+		MutexAutoLock lock(m_mutex);
+		typename std::map<T, u32>::iterator n;
+		n = m_value_to_id.find(value);
+		if(n != m_value_to_id.end())
+			return n->second;
+		m_id_to_value.push_back(value);
+		u32 new_id = m_id_to_value.size();
+		m_value_to_id.insert(value, new_id);
+		return new_id;
+	}
+
+private:
+	Mutex m_mutex;
+	// Values are stored here at id-1 position (id 1 = [0])
+	std::vector<T> m_id_to_value;
+	std::map<T, u32> m_value_to_id;
+};
+
+/*
+FIFO queue (well, actually a FILO also)
+*/
+template<typename T>
+class Queue //TODO! rename me to shared_queue
+: public locker<>, public std::queue<T>
+{
+public:
+	Queue() { }
+
+	void push_back(T t)
+	{
+		auto lock = lock_unique();
+		std::queue<T>::push(t);
+	}
+
+	void push(T t)
+	{
+		auto lock = lock_unique();
+		std::queue<T>::push(t);
+	}
+
+	// usually used as pop_front()
+	T front() = delete;
+	void pop() = delete;
+
+	T pop_front()
+	{
+		auto lock = lock_unique();
+		T val = std::queue<T>::front();
+		std::queue<T>::pop();
+		return val;
+	}
+
+	u32 size()
+	{
+		auto lock = lock_shared();
+		return std::queue<T>::size();
+	}
+
+	bool empty()
+	{
+		auto lock = lock_shared();
+		return std::queue<T>::empty();
+	}
+};
+
 // Thread-safe Double-ended queue
 
 template<typename T>
@@ -133,9 +235,22 @@
 	MutexedQueue() {}
 	bool empty() const
 	{
+		//try_shared_lock lock(m_mutex);
 		MutexAutoLock lock(m_mutex);
 		return m_queue.empty();
 	}
+	bool empty_try()
+	{
+		//try_shared_lock lock(m_mutex, std::try_to_lock);
+		MutexAutoLock lock(m_mutex);
+		//if (!lock.owns_lock())
+		//	return 1;
+		return m_queue.empty();
+	}
+	size_t size() {
+		MutexAutoLock lock(m_mutex);
+		return m_queue.size();
+	}
 
 	void push_back(T t)
 	{
