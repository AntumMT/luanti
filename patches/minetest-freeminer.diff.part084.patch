diff -ruN minetest-master/builtin/game/falling.lua minetest-freeminer/builtin/game/falling.lua
--- minetest-master/builtin/game/falling.lua	2016-09-03 16:15:52.577779000 -0700
+++ minetest-freeminer/builtin/game/falling.lua	2016-09-03 15:43:59.730739000 -0700
@@ -4,6 +4,29 @@
 -- Falling stuff
 --
 
+function node_drop(np, remove_fast)
+			local n2 = minetest.get_node(np)
+			-- If it's not air or liquid, remove node and replace it with
+			-- it's drops
+			if n2.name ~= "air" and (not core.registered_nodes[n2.name] or
+					core.registered_nodes[n2.name].liquidtype == "none") then
+				core.remove_node(np, remove_fast)
+				if core.registered_nodes[n2.name].buildable_to == false then
+					-- Add dropped items
+					local drops = core.get_node_drops(n2.name, "")
+					for _, dropped_item in ipairs(drops) do
+						core.add_item(np, dropped_item)
+					end
+				end
+				-- Run script hook
+				for _, callback in ipairs(core.registered_on_dignodes) do
+					callback(np, n2, nil)
+				end
+			end
+end
+
+local remove_fast = 0
+
 core.register_entity(":__builtin:falling_node", {
 	initial_properties = {
 		visual = "wielditem",
@@ -41,6 +64,7 @@
 	end,
 
 	on_step = function(self, dtime)
+		if dtime > 0.2 then remove_fast = 2 else remove_fast = 0 end
 		 -- Set gravity
 		local acceleration = self.object:getacceleration()
 		if not vector.equals(acceleration, {x = 0, y = -10, z = 0}) then
@@ -56,7 +80,7 @@
 				(bcd.walkable or
 				(core.get_item_group(self.node.name, "float") ~= 0 and
 				bcd.liquidtype ~= "none")) then
-			if bcd and bcd.leveled and
+			if bcd and bcd.leveled and bcd.leveled > 0 and
 					bcn.name == self.node.name then
 				local addlevel = self.node.level
 				if not addlevel or addlevel <= 0 then
@@ -69,7 +93,7 @@
 			elseif bcd and bcd.buildable_to and
 					(core.get_item_group(self.node.name, "float") == 0 or
 					bcd.liquidtype == "none") then
-				core.remove_node(bcp)
+				core.remove_node(bcp, remove_fast)
 				return
 			end
 			local np = {x = bcp.x, y = bcp.y + 1, z = bcp.z}
@@ -77,21 +101,7 @@
 			local n2 = core.get_node(np)
 			-- If it's not air or liquid, remove node and replace it with
 			-- it's drops
-			if n2.name ~= "air" and (not core.registered_nodes[n2.name] or
-					core.registered_nodes[n2.name].liquidtype == "none") then
-				core.remove_node(np)
-				if core.registered_nodes[n2.name].buildable_to == false then
-					-- Add dropped items
-					local drops = core.get_node_drops(n2.name, "")
-					for _, dropped_item in ipairs(drops) do
-						core.add_item(np, dropped_item)
-					end
-				end
-				-- Run script hook
-				for _, callback in ipairs(core.registered_on_dignodes) do
-					callback(np, n2)
-				end
-			end
+				node_drop(np, remove_fast)
 			-- Create node and remove entity
 			if core.registered_nodes[self.node.name] then
 				core.add_node(np, self.node)
@@ -109,13 +119,17 @@
 })
 
 function spawn_falling_node(p, node)
+	return core.spawn_falling_node(p, node)
+--[[
 	local obj = core.add_entity(p, "__builtin:falling_node")
+	if not obj then return end
 	obj:get_luaentity():set_node(node)
+]]
 end
 
 function drop_attached_node(p)
 	local nn = core.get_node(p).name
-	core.remove_node(p)
+	core.remove_node(p, remove_fast)
 	for _, item in ipairs(core.get_node_drops(nn, "")) do
 		local pos = {
 			x = p.x + math.random()/2 - 0.25,
@@ -161,7 +175,7 @@
 				(not core.registered_nodes[n_bottom.name].walkable or
 					core.registered_nodes[n_bottom.name].buildable_to) then
 			n.level = core.get_node_level(p)
-			core.remove_node(p)
+			core.remove_node(p, remove_fast)
 			spawn_falling_node(p, n)
 			return true
 		end
