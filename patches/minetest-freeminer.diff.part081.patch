diff -ruN minetest-master/builtin/common/misc_helpers.lua minetest-freeminer/builtin/common/misc_helpers.lua
--- minetest-master/builtin/common/misc_helpers.lua	2016-09-03 16:15:52.697779000 -0700
+++ minetest-freeminer/builtin/common/misc_helpers.lua	2016-09-03 15:44:00.010741000 -0700
@@ -460,6 +460,114 @@
 --implies infinite stacks when performing a 6d rotation.
 --------------------------------------------------------------------------------
 
+	minetest.rotate_node = function(itemstack, placer, pointed_thing)
+		minetest.rotate_and_place(itemstack, placer, pointed_thing,
+		minetest.setting_getbool("creative_mode"), 
+		{invert_wall = placer:get_player_control().sneak})
+		return itemstack
+	end
+
+--------------------------------------------------------------------------------
+-- Function to make a copy of an existing node definition, to be used
+-- by mods that need to redefine some aspect of a node, but without
+-- them having to copy&paste the entire node definition.
+--------------------------------------------------------------------------------
+
+	function minetest.clone_node(name)
+		node2={}
+		node=minetest.registered_nodes[name]
+		for k,v in pairs(node) do
+			node2[k]=v
+		end
+		return node2
+	end
+
+end
+
+--------------------------------------------------------------------------------
+
+if minetest then
+	local dirs1 = { 9, 18, 7, 12 }
+	local dirs2 = { 20, 23, 22, 21 }
+
+	function minetest.rotate_and_place(itemstack, placer, pointed_thing, infinitestacks, orient_flags)
+		orient_flags = orient_flags or {}
+
+		local node = minetest.get_node(pointed_thing.under)
+		if not minetest.registered_nodes[node.name]
+		   or not minetest.registered_nodes[node.name].on_rightclick then
+
+			local above = pointed_thing.above
+			local under = pointed_thing.under
+			local pitch = placer:get_look_pitch()
+			local pname = minetest.get_node(under).name
+			local node = minetest.get_node(above)
+			local fdir = minetest.dir_to_facedir(placer:get_look_dir())
+			local wield_name = itemstack:get_name()
+			local reg_node = minetest.registered_nodes[pname]
+
+			if not reg_node or not reg_node.on_rightclick then
+
+				local iswall = (above.x ~= under.x) or (above.z ~= under.z)
+				local isceiling = (above.x == under.x) and (above.z == under.z)
+								  and (pitch > 0)
+				local pos1 = above
+
+				if reg_node and reg_node.buildable_to then
+					pos1 = under
+					iswall = false
+				end
+
+				reg_node = minetest.registered_nodes[minetest.get_node(pos1).name]
+				if not reg_node or not reg_node.buildable_to then
+					return
+				end
+
+				if orient_flags.force_floor then
+					iswall = false
+					isceiling = false
+				elseif orient_flags.force_ceiling then 
+					iswall = false
+					isceiling = true
+				elseif orient_flags.force_wall then					
+					iswall = true
+					isceiling = false
+				elseif orient_flags.invert_wall then
+					iswall = not iswall
+				end
+
+				if iswall then
+					minetest.add_node(pos1, {name = wield_name, param2 = dirs1[fdir+1] })
+				elseif isceiling then
+					if orient_flags.force_facedir then
+						minetest.add_node(pos1, {name = wield_name, param2 = 20 })
+					else
+						minetest.add_node(pos1, {name = wield_name, param2 = dirs2[fdir+1] })
+					end
+				else -- place right side up
+					if orient_flags.force_facedir then
+						minetest.add_node(pos1, {name = wield_name, param2 = 0 })
+					else
+						minetest.add_node(pos1, {name = wield_name, param2 = fdir })
+					end
+				end
+
+				if not infinitestacks then
+					itemstack:take_item()
+					return itemstack
+				end
+			end
+		else
+			minetest.registered_nodes[node.name].on_rightclick(pointed_thing.under, node, placer, itemstack)
+		end
+	end
+
+
+--------------------------------------------------------------------------------
+--Wrapper for rotate_and_place() to check for sneak and assume Creative mode
+--implies infinite stacks when performing a 6d rotation.
+--------------------------------------------------------------------------------
+
 
 	core.rotate_node = function(itemstack, placer, pointed_thing)
 		core.rotate_and_place(itemstack, placer, pointed_thing,
@@ -636,5 +744,8 @@
 	function fgettext(text, ...)
 		return core.formspec_escape(fgettext_ne(text, ...))
 	end
-end
 
+	function fgettext(text, ...)
+		return core.formspec_escape(fgettext_ne(text, ...))
+	end
+end
