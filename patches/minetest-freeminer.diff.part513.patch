diff -ruN minetest-master/src/socket.h minetest-freeminer/src/socket.h
--- minetest-master/src/socket.h	2016-09-03 16:15:52.493778000 -0700
+++ minetest-freeminer/src/socket.h	2016-09-03 15:43:59.866740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+socket.h
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef SOCKET_HEADER
@@ -27,9 +30,9 @@
 #ifndef _WIN32_WINNT
 	#define _WIN32_WINNT 0x0501
 #endif
-	#include <windows.h>
 	#include <winsock2.h>
 	#include <ws2tcpip.h>
+	#include <windows.h>
 #else
 	#include <sys/socket.h>
 	#include <netinet/in.h>
@@ -86,6 +89,9 @@
 	Address(u32 address, u16 port);
 	Address(u8 a, u8 b, u8 c, u8 d, u16 port);
 	Address(const IPv6AddressBytes *ipv6_bytes, u16 port);
+	Address(const in6_addr & addr, u16 port) { setAddress(addr); setPort(port); };
+	Address(const sockaddr_in6 & sai) { m_address.ipv6 = sai; m_addr_family = sai.sin6_family; m_port = ntohs(sai.sin6_port); };
+	Address(const sockaddr_in & sai) { m_address.ipv4 = sai; m_addr_family = sai.sin_family; m_port = ntohs(sai.sin_port); };
 	bool operator==(const Address &address);
 	bool operator!=(const Address &address);
 	// Resolve() may throw ResolveError (address is unchanged in this case)
@@ -95,6 +101,7 @@
 	void setAddress(u32 address);
 	void setAddress(u8 a, u8 b, u8 c, u8 d);
 	void setAddress(const IPv6AddressBytes *ipv6_bytes);
+	void setAddress(const in6_addr & addr) { m_address.ipv6.sin6_addr = addr; m_addr_family = AF_INET6; m_address.ipv6.sin6_family = AF_INET6; }
 	struct sockaddr_in6 getAddress6() const;
 	int getFamily() const;
 	bool isIPv6() const;
