diff -ruN minetest-master/src/sound.h minetest-freeminer/src/sound.h
--- minetest-master/src/sound.h	2016-09-03 16:15:52.561779000 -0700
+++ minetest-freeminer/src/sound.h	2016-09-03 15:43:59.902741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+sound.h
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef SOUND_HEADER
@@ -23,6 +26,9 @@
 #include "irrlichttypes_bloated.h"
 #include <string>
 #include <set>
+#include "msgpack_fix.h"
+#include "network/connection.h"
+#include "util/msgpack_serialize.h"
 
 class OnDemandSoundFetcher
 {
@@ -32,6 +38,11 @@
 			std::set<std::string> &dst_datas) = 0;
 };
 
+enum {
+	SOUNDSPEC_NAME,
+	SOUNDSPEC_GAIN
+};
+
 struct SimpleSoundSpec
 {
 	std::string name;
@@ -41,7 +52,17 @@
 		gain(gain)
 	{}
 	bool exists() {return name != "";}
-	// Serialization intentionally left out
+
+	void msgpack_pack(msgpack::packer<msgpack::sbuffer> &pk) const {
+		pk.pack_map(2);
+		PACK(SOUNDSPEC_NAME, name);
+		PACK(SOUNDSPEC_GAIN, gain);
+	}
+	void msgpack_unpack(msgpack::object o) {
+		MsgpackPacket packet = o.as<MsgpackPacket>();
+		packet[SOUNDSPEC_NAME].convert(name);
+		packet[SOUNDSPEC_GAIN].convert(gain);
+	}
 };
 
 class ISoundManager
