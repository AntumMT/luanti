diff -ruN minetest-master/src/script/cpp_api/s_node.cpp minetest-freeminer/src/script/cpp_api/s_node.cpp
--- minetest-master/src/script/cpp_api/s_node.cpp	2016-09-03 16:15:52.713779000 -0700
+++ minetest-freeminer/src/script/cpp_api/s_node.cpp	2016-09-03 15:44:00.014741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+script/cpp_api/s_node.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "cpp_api/s_node.h"
@@ -193,6 +196,45 @@
 	lua_pop(L, 1);  // Pop error handler
 }
 
+void ScriptApiNode::node_on_activate(v3s16 p, MapNode node)
+{
+	SCRIPTAPI_PRECHECKHEADER
+
+	lua_pushcfunction(L, script_error_handler);
+	int errorhandler = lua_gettop(L);
+
+	INodeDefManager *ndef = getServer()->ndef();
+
+	// Push callback function on stack
+	if(!getItemCallback(ndef->get(node).name.c_str(), "on_activate"))
+	{
+		return;
+	}
+	// Call function
+	push_v3s16(L, p);
+	PCALL_RES(lua_pcall(L, 1, 0, errorhandler));
+	lua_pop(L, 1); // Pop error handler
+}
+
+void ScriptApiNode::node_on_deactivate(v3s16 p, MapNode node)
+{
+	SCRIPTAPI_PRECHECKHEADER
+
+	lua_pushcfunction(L, script_error_handler);
+	int errorhandler = lua_gettop(L);
+
+	INodeDefManager *ndef = getServer()->ndef();
+
+	// Push callback function on stack
+	if(!getItemCallback(ndef->get(node).name.c_str(), "on_deactivate"))
+		return;
+
+	// Call function
+	push_v3s16(L, p);
+	PCALL_RES(lua_pcall(L, 1, 0, errorhandler));
+	lua_pop(L, 1); // Pop error handler
+}
+
 bool ScriptApiNode::node_on_timer(v3s16 p, MapNode node, f32 dtime)
 {
 	SCRIPTAPI_PRECHECKHEADER
@@ -250,6 +292,7 @@
 	lua_pop(L, 1);  // Pop error handler
 }
 
+/*
 void ScriptApiNode::node_falling_update(v3s16 p)
 {
 	SCRIPTAPI_PRECHECKHEADER
@@ -273,3 +316,18 @@
 	PCALL_RES(lua_pcall(L, 1, 0, error_handler));
 	lua_pop(L, 1);  // Pop error handler
 }
+*/
+
+void ScriptApiNode::node_drop(v3s16 p, int fast = 0)
+{
+	SCRIPTAPI_PRECHECKHEADER
+
+	lua_pushcfunction(L, script_error_handler);
+	int errorhandler = lua_gettop(L);
+
+	lua_getglobal(L, "node_drop");
+	push_v3s16(L, p);
+	lua_pushinteger(L, fast);
+	PCALL_RES(lua_pcall(L, 2, 0, errorhandler));
+	lua_pop(L, 1); // Pop error handler
+}
