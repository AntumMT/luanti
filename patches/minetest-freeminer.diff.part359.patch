diff -ruN minetest-master/src/mapnode.h minetest-freeminer/src/mapnode.h
--- minetest-master/src/mapnode.h	2016-09-03 16:15:52.553779000 -0700
+++ minetest-freeminer/src/mapnode.h	2016-09-03 15:43:59.898740000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+mapnode.h
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef MAPNODE_HEADER
@@ -26,6 +29,9 @@
 #include "light.h"
 #include <string>
 #include <vector>
+#include <list>
+#include "msgpack_fix.h"
+#include "config.h"
 
 class INodeDefManager;
 
@@ -37,6 +43,8 @@
 */
 typedef u16 content_t;
 
+#define CONTENT_ID_CAPACITY (1 << (8 * sizeof(content_t)))
+
 /*
 	The maximum node ID that can be registered by mods. This must
 	be significantly lower than the maximum content_t value, so that
@@ -45,6 +53,7 @@
 */
 #define MAX_REGISTERED_CONTENT 0x7fffU
 
+#if MINETEST_PROTO
 /*
 	A solid walkable node with the texture unknown_node.png.
 
@@ -72,6 +81,15 @@
 */
 #define CONTENT_IGNORE 127
 
+#else
+
+//freeminer:
+#define CONTENT_UNKNOWN 2
+#define CONTENT_AIR 1
+#define CONTENT_IGNORE 0
+
+#endif
+
 enum LightBank
 {
 	LIGHTBANK_DAY,
@@ -93,7 +111,7 @@
 	Masks for MapNode.param2 of flowing liquids
  */
 #define LIQUID_LEVEL_MASK 0x07
-#define LIQUID_FLOW_DOWN_MASK 0x08
+#define LIQUID_FLOW_DOWN_MASK 0x40 //0b01000000 // only for _flowing liquid
 
 //#define LIQUID_LEVEL_MASK 0x3f // better finite water
 //#define LIQUID_FLOW_DOWN_MASK 0x40 // not used when finite water
@@ -102,10 +120,11 @@
 #define LIQUID_LEVEL_MAX LIQUID_LEVEL_MASK
 #define LIQUID_LEVEL_SOURCE (LIQUID_LEVEL_MAX+1)
 
-#define LIQUID_INFINITY_MASK 0x80 //0b10000000
+#define LIQUID_INFINITY_MASK 0x80 // 0b10000000 // only for _source liquid
+#define LIQUID_STABLE_MASK   0x40 // 0b01000000
 
 // mask for param2, now as for liquid
-#define LEVELED_MASK 0x3F
+#define LEVELED_MASK 0x1F         // 0b00011111 // was: 0x3F
 #define LEVELED_MAX LEVELED_MASK
 
 
@@ -139,15 +158,17 @@
 	*/
 	u8 param2;
 
+	/*
 	MapNode()
 	{ }
+	*/
 
 	MapNode(const MapNode & n)
 	{
 		*this = n;
 	}
 
-	MapNode(content_t content, u8 a_param1=0, u8 a_param2=0)
+	MapNode(content_t content = CONTENT_AIR, u8 a_param1=0, u8 a_param2=0)
 		: param0(content),
 		  param1(a_param1),
 		  param2(a_param2)
@@ -240,7 +261,7 @@
 	/*
 		Gets list of node boxes (used for rendering (NDT_NODEBOX))
 	*/
-	void getNodeBoxes(INodeDefManager *nodemgr, std::vector<aabb3f> *boxes, u8 neighbors = 0);
+	void getNodeBoxes(INodeDefManager *nodemgr, std::vector<aabb3f> *boxes, u8 neighbors = 0) const;
 
 	/*
 		Gets list of selection boxes
@@ -255,10 +276,13 @@
 	/*
 		Liquid helpers
 	*/
-	u8 getMaxLevel(INodeDefManager *nodemgr) const;
+	u8 getMaxLevel(INodeDefManager *nodemgr, bool compress = 0) const;
 	u8 getLevel(INodeDefManager *nodemgr) const;
-	u8 setLevel(INodeDefManager *nodemgr, s8 level = 1);
-	u8 addLevel(INodeDefManager *nodemgr, s8 add = 1);
+	u16 setLevel(INodeDefManager *nodemgr, s16 level = 1, bool compress = 0);
+	u16 addLevel(INodeDefManager *nodemgr, s16 add = 1, bool compress = 0);
+	int freeze_melt(INodeDefManager *nodemgr, int direction = 0);
+
+	operator bool() const { return param0 != CONTENT_IGNORE; }
 
 	/*
 		Serialization functions
@@ -282,6 +306,15 @@
 			MapNode *nodes, u32 nodecount,
 			u8 content_width, u8 params_width, bool compressed);
 
+	void msgpack_pack(msgpack::packer<msgpack::sbuffer> &pk) const;
+	void msgpack_unpack(msgpack::object o);
+
+	friend std::ostream & operator<<(std::ostream &os, const MapNode n) {
+		os << "node["<<(int)n.param0<<","<<(int)n.param1<<","<<(int)n.param2<<"]";
+		return os;
+	}
+
+
 private:
 	// Deprecated serialization methods
 	void deSerialize_pre22(u8 *source, u8 version);
