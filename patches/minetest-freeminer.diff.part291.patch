diff -ruN minetest-master/src/intlGUIEditBox.cpp minetest-freeminer/src/intlGUIEditBox.cpp
--- minetest-master/src/intlGUIEditBox.cpp	2016-09-03 16:15:52.445778000 -0700
+++ minetest-freeminer/src/intlGUIEditBox.cpp	2016-09-03 15:43:59.846740000 -0700
@@ -31,7 +31,7 @@
 
 #include "intlGUIEditBox.h"
 
-#if defined(_IRR_COMPILE_WITH_GUI_) && IRRLICHT_VERSION_MAJOR == 1 && IRRLICHT_VERSION_MINOR < 9
+#ifdef _IRR_COMPILE_WITH_GUI_
 
 #include "IGUISkin.h"
 #include "IGUIEnvironment.h"
@@ -42,6 +42,7 @@
 #include "porting.h"
 //#include "Keycodes.h"
 #include "log.h"
+//#include "util/string.h"
 
 /*
 	todo:
@@ -177,7 +178,6 @@
 
 bool intlGUIEditBox::isOverrideColorEnabled() const
 {
-	_IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX;
 	return OverrideColorEnabled;
 }
 
@@ -203,7 +203,6 @@
 //! Checks if word wrap is enabled
 bool intlGUIEditBox::isWordWrapEnabled() const
 {
-	_IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX;
 	return WordWrap;
 }
 
@@ -218,7 +217,6 @@
 //! Checks if multi line editing is enabled
 bool intlGUIEditBox::isMultiLineEnabled() const
 {
-	_IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX;
 	return MultiLine;
 }
 
@@ -238,7 +236,6 @@
 
 bool intlGUIEditBox::isPasswordBox() const
 {
-	_IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX;
 	return PasswordBox;
 }
 
@@ -271,7 +268,7 @@
 			break;
 		case EET_KEY_INPUT_EVENT:
         {
-#if (defined(__linux__) || defined(__FreeBSD__))
+#if (defined(linux) || defined(__FreeBSD__)) and IRRLICHT_VERSION_10000 < 10900
             // ################################################################
 			// ValkaTR:
             // This part is the difference from the original intlGUIEditBox
@@ -317,7 +314,6 @@
 	s32 newMarkEnd = MarkEnd;
 
 	// control shortcut handling
-
 	if (event.KeyInput.Control)
 	{
 		// german backlash '\' entered with control + '?'
@@ -462,6 +458,11 @@
 	switch(event.KeyInput.Key)
 	{
 	case KEY_END:
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		{
 			s32 p = Text.size();
 			if (WordWrap || MultiLine)
@@ -489,6 +490,11 @@
 		}
 		break;
 	case KEY_HOME:
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		{
 
 			s32 p = 0;
@@ -525,7 +531,11 @@
 		}
 		break;
 	case KEY_LEFT:
-
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		if (event.KeyInput.Shift)
 		{
 			if (CursorPos > 0)
@@ -547,6 +557,11 @@
 		break;
 
 	case KEY_RIGHT:
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		if (event.KeyInput.Shift)
 		{
 			if (Text.size() > (u32)CursorPos)
@@ -567,6 +582,11 @@
 		BlinkStartTime = porting::getTimeMs();
 		break;
 	case KEY_UP:
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		if (MultiLine || (WordWrap && BrokenText.size() > 1) )
 		{
 			s32 lineNo = getLineFromPos(CursorPos);
@@ -598,6 +618,11 @@
 		}
 		break;
 	case KEY_DOWN:
+		// Handle numpad input
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		if (MultiLine || (WordWrap && BrokenText.size() > 1) )
 		{
 			s32 lineNo = getLineFromPos(CursorPos);
@@ -672,7 +697,11 @@
 	case KEY_DELETE:
 		if ( !this->IsEnabled )
 			break;
-
+		// Handle numpad input
+		if (event.KeyInput.Char != 0 && event.KeyInput.Char != 127) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
 		if (Text.size() != 0)
 		{
 			core::stringw s;
@@ -707,9 +736,15 @@
 		}
 		break;
 
+	case KEY_SHIFT:
+		if (event.KeyInput.Char != 0) {
+			inputChar(event.KeyInput.Char);
+			return true;
+		}
+		break;
+
 	case KEY_ESCAPE:
 	case KEY_TAB:
-	case KEY_SHIFT:
 	case KEY_F1:
 	case KEY_F2:
 	case KEY_F3:
@@ -772,11 +807,19 @@
 
 	FrameRect = AbsoluteRect;
 
+#if IRRLICHT_VERSION_10000  > 10703
+	EGUI_DEFAULT_COLOR bgCol = EGDC_GRAY_EDITABLE;
+	if (isEnabled())
+		bgCol = focus ? EGDC_FOCUSED_EDITABLE : EGDC_EDITABLE;
+#else
+	EGUI_DEFAULT_COLOR bgCol = EGDC_WINDOW;
+#endif
+
 	// draw the border
 
 	if (Border)
 	{
-		skin->draw3DSunkenPane(this, skin->getColor(EGDC_WINDOW),
+		skin->draw3DSunkenPane(this, skin->getColor(bgCol),
 			false, true, FrameRect, &AbsoluteClippingRect);
 
 		FrameRect.UpperLeftCorner.X += skin->getSize(EGDS_TEXT_DISTANCE_X)+1;
@@ -975,7 +1018,6 @@
 //! \return true if automatic scrolling is enabled, false if not
 bool intlGUIEditBox::isAutoScrollEnabled() const
 {
-	_IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX;
 	return AutoScroll;
 }
 
