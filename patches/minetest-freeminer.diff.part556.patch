diff -ruN minetest-master/src/util/numeric.cpp minetest-freeminer/src/util/numeric.cpp
--- minetest-master/src/util/numeric.cpp	2016-09-03 16:15:52.625779000 -0700
+++ minetest-freeminer/src/util/numeric.cpp	2016-09-03 15:43:59.950741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+util/numeric.cpp
 Copyright (C) 2010-2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "numeric.h"
@@ -26,6 +29,7 @@
 #include "../threading/mutex_auto_lock.h"
 #include <string.h>
 #include <iostream>
+#include <atomic>
 
 std::map<u16, std::vector<v3s16> > FacePositionCache::m_cache;
 Mutex FacePositionCache::m_cache_mutex;
@@ -206,10 +210,10 @@
 	);
 
 	// Block position relative to camera
-	v3f blockpos_relative = blockpos - camera_pos;
+	//v3f blockpos_relative = blockpos - camera_pos;
 
 	// Total distance
-	f32 d = blockpos_relative.getLength();
+	f32 d = radius_box(blockpos, camera_pos); //blockpos_relative.getLength();
 
 	if(distance_ptr)
 		*distance_ptr = d;
@@ -220,13 +224,15 @@
 
 	// Maximum radius of a block.  The magic number is
 	// sqrt(3.0) / 2.0 in literal form.
-	f32 block_max_radius = 0.866025403784 * MAP_BLOCKSIZE * BS;
+	f32 block_max_radius = MAP_BLOCKSIZE * BS;
 
 	// If block is (nearly) touching the camera, don't
 	// bother validating further (that is, render it anyway)
 	if(d < block_max_radius)
 		return true;
 
+	if (!camera_fov)
+		return true;
 	// Adjust camera position, for purposes of computing the angle,
 	// such that a block that has any portion visible with the
 	// current camera position will have the center visible at the
