diff -ruN minetest-master/src/porting.cpp minetest-freeminer/src/porting.cpp
--- minetest-master/src/porting.cpp	2016-09-03 16:15:52.617779000 -0700
+++ minetest-freeminer/src/porting.cpp	2016-09-03 15:43:59.950741000 -0700
@@ -1,20 +1,23 @@
 /*
-Minetest
+porting.cpp
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /*
@@ -72,12 +75,27 @@
 	return &g_killed;
 }
 
+std::atomic_bool g_sighup, g_siginfo;
+
 #if !defined(_WIN32) // POSIX
 	#include <signal.h>
 
 void signal_handler(int sig)
 {
+	switch(sig) {
+#if defined(SIGINFO)
+		case SIGINFO:
+			g_siginfo = true;
+		break;
+#endif
+		case SIGHUP:
+			g_sighup = true;
+		break;
+		case SIGINT:
+		case SIGTERM:
+
 	if (!g_killed) {
+		g_killed = true;
 		if (sig == SIGINT) {
 			dstream << "INFO: signal_handler(): "
 				<< "Ctrl-C pressed, shutting down." << std::endl;
@@ -90,17 +108,26 @@
 		/*dstream << "INFO: sigint_handler(): "
 				<< "Printing debug stacks" << std::endl;
 		debug_stacks_print();*/
+	}
+		break;
 
-		g_killed = true;
-	} else {
+		default:
 		(void)signal(sig, SIG_DFL);
 	}
+
 }
 
 void signal_handler_init(void)
 {
+	g_sighup = false;
+	g_siginfo = false;
+
 	(void)signal(SIGINT, signal_handler);
 	(void)signal(SIGTERM, signal_handler);
+	(void)signal(SIGHUP, signal_handler);
+#if defined(SIGINFO)
+	(void)signal(SIGINFO, signal_handler);
+#endif
 }
 
 #else // _WIN32
@@ -136,7 +163,6 @@
 
 #endif
 
-
 /*
 	Path mangler
 */
@@ -514,6 +540,13 @@
 			path_share += DIR_DELIM "..";
 			path_user  += DIR_DELIM "..";
 		}
+		else {
+		#if STATIC_BUILD
+			path_share = execpath + "\\.";
+			path_user = execpath + "\\.";
+		#endif
+		}
+
 	} else {
 		errorstream << "Failed to get paths by executable location, "
 			"trying cwd" << std::endl;
@@ -802,7 +835,7 @@
 }
 
 #	ifndef __ANDROID__
-#		ifdef XORG_USED
+#		if defined(WTF) && defined(XORG_USED)
 
 static float calcDisplayDensity()
 {
@@ -825,7 +858,7 @@
 	}
 
 	/* return manually specified dpi */
-	return g_settings->getFloat("screen_dpi")/96.0;
+	return get_dpi()/96.0;
 }
 
 
@@ -835,11 +868,10 @@
 	return cached_display_density;
 }
 
-
 #		else // XORG_USED
 float getDisplayDensity()
 {
-	return g_settings->getFloat("screen_dpi")/96.0;
+	return get_dpi()/96.0;
 }
 #		endif // XORG_USED
 
@@ -852,10 +884,40 @@
 
 	return deskres;
 }
+
+float get_dpi() {
+	return g_settings->getFloat("screen_dpi");
+}
+
+int get_densityDpi() { return 0; }
+
 #	endif // __ANDROID__
 #endif // SERVER
 
 
+extern "C" unsigned int get_time_us() {
+	return porting::getTimeUs();
+}
+
+void irr_device_wait_egl (irr::IrrlichtDevice *dev) {
+#ifdef __ANDROID__
+	if (!dev)
+		dev = device;
+	if (!dev)
+		return;
+	int i = 0;
+	while (!dev->getContextManager()->generateContext()) {
+		dev->sleep(100);
+		if (++i > 100) {
+			errorstream << "Cant generate egl context >10s, something can crash now.." << std::endl;
+			break;
+		}
+	}
+	dev->getContextManager()->activateContext(dev->getContextManager()->getContext());
+#endif
+}
+
+
 ////
 //// OS-specific Secure Random
 ////
