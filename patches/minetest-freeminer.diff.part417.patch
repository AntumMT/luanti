diff -ruN minetest-master/src/profiler.h minetest-freeminer/src/profiler.h
--- minetest-master/src/profiler.h	2016-09-03 16:15:52.609779000 -0700
+++ minetest-freeminer/src/profiler.h	2016-09-03 15:43:59.758740000 -0700
@@ -1,25 +1,29 @@
 /*
-Minetest
+profiler.h
 Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
+*/
+
+/*
+This file is part of Freeminer.
 
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU Lesser General Public License as published by
-the Free Software Foundation; either version 2.1 of the License, or
+Freeminer is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
-This program is distributed in the hope that it will be useful,
+Freeminer  is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU Lesser General Public License for more details.
+GNU General Public License for more details.
 
-You should have received a copy of the GNU Lesser General Public License along
-with this program; if not, write to the Free Software Foundation, Inc.,
-51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+You should have received a copy of the GNU General Public License
+along with Freeminer.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef PROFILER_HEADER
 #define PROFILER_HEADER
 
+#include <algorithm>
 #include "irrlichttypes.h"
 #include <string>
 #include <map>
@@ -39,6 +43,24 @@
 /*
 	Time profiler
 */
+extern bool g_profiler_enabled;
+
+struct ProfValue {
+	unsigned int calls;
+	float sum, min, max, avg;
+	ProfValue(float value = 0) {
+		calls = 1;
+		sum = min = max = avg = value;
+	}
+	void add(float value = 0) {
+		++calls;
+		sum += value;
+		min = std::min(min, value);
+		max = std::max(max, value);
+		//avg += (avg > value ? -1 : 1) * value/100;
+		avg = sum/calls;
+	}
+};
 
 class Profiler
 {
@@ -49,47 +71,26 @@
 
 	void add(const std::string &name, float value)
 	{
+		if(!g_profiler_enabled)
+			return;
 		MutexAutoLock lock(m_mutex);
 		{
-			/* No average shall have been used; mark add used as -2 */
-			std::map<std::string, int>::iterator n = m_avgcounts.find(name);
-			if(n == m_avgcounts.end())
-				m_avgcounts[name] = -2;
-			else{
-				if(n->second == -1)
-					n->second = -2;
-				assert(n->second == -2);
-			}
-		}
-		{
-			std::map<std::string, float>::iterator n = m_data.find(name);
+			auto n = m_data.find(name);
 			if(n == m_data.end())
-				m_data[name] = value;
+				m_data[name] = ProfValue(value);
 			else
-				n->second += value;
+				n->second.add(value);
 		}
 	}
-
 	void avg(const std::string &name, float value)
 	{
-		MutexAutoLock lock(m_mutex);
-		int &count = m_avgcounts[name];
-
-		assert(count != -2);
-		count = MYMAX(count, 0) + 1;
-		m_data[name] += value;
+		add(name, value);
 	}
 
 	void clear()
 	{
 		MutexAutoLock lock(m_mutex);
-		for(std::map<std::string, float>::iterator
-				i = m_data.begin();
-				i != m_data.end(); ++i)
-		{
-			i->second = 0;
-		}
-		m_avgcounts.clear();
+		m_data.clear();
 	}
 
 	void print(std::ostream &o)
@@ -99,17 +100,10 @@
 
 	float getValue(const std::string &name) const
 	{
-		std::map<std::string, float>::const_iterator numerator = m_data.find(name);
-		if (numerator == m_data.end())
+		auto data = m_data.find(name);
+		if (data == m_data.end())
 			return 0.f;
-
-		std::map<std::string, int>::const_iterator denominator = m_avgcounts.find(name);
-		if (denominator != m_avgcounts.end()){
-			if (denominator->second >= 1)
-				return numerator->second / denominator->second;
-		}
-
-		return numerator->second;
+		return data->second.avg;
 	}
 
 	void printPage(std::ostream &o, u32 page, u32 pagecount)
@@ -119,9 +113,7 @@
 		u32 minindex, maxindex;
 		paging(m_data.size(), page, pagecount, minindex, maxindex);
 
-		for(std::map<std::string, float>::iterator
-				i = m_data.begin();
-				i != m_data.end(); ++i)
+		for(auto & i : m_data)
 		{
 			if(maxindex == 0)
 				break;
@@ -133,13 +125,7 @@
 				continue;
 			}
 
-			std::string name = i->first;
-			int avgcount = 1;
-			std::map<std::string, int>::iterator n = m_avgcounts.find(name);
-			if(n != m_avgcounts.end()){
-				if(n->second >= 1)
-					avgcount = n->second;
-			}
+			const std::string & name = i.first;
 			o<<"  "<<name<<": ";
 			s32 clampsize = 40;
 			s32 space = clampsize - name.size();
@@ -150,7 +136,12 @@
 				else
 					o<<" ";
 			}
-			o<<(i->second / avgcount);
+
+			if (i.second.sum == i.second.calls || !i.second.sum)
+				o<<i.second.calls;
+			else
+				o<<i.second.calls<<" * "<<i.second.avg<<" = "<<i.second.sum;
+			//o<<(i->second / avgcount);
 			o<<std::endl;
 		}
 	}
@@ -177,15 +168,13 @@
 	void remove(const std::string& name)
 	{
 		MutexAutoLock lock(m_mutex);
-		m_avgcounts.erase(name);
 		m_data.erase(name);
 	}
 
 private:
 	Mutex m_mutex;
-	std::map<std::string, float> m_data;
-	std::map<std::string, int> m_avgcounts;
-	std::map<std::string, float> m_graphvalues;
+	GraphValues m_graphvalues;
+	std::map<std::string, ProfValue> m_data;
 };
 
 enum ScopeProfilerType{
@@ -207,17 +196,6 @@
 		if(m_profiler)
 			m_timer = new TimeTaker(m_name.c_str());
 	}
-	// name is copied
-	ScopeProfiler(Profiler *profiler, const char *name,
-			enum ScopeProfilerType type = SPT_ADD):
-		m_profiler(profiler),
-		m_name(name),
-		m_timer(NULL),
-		m_type(type)
-	{
-		if(m_profiler)
-			m_timer = new TimeTaker(m_name.c_str());
-	}
 	~ScopeProfiler()
 	{
 		if(m_timer)
@@ -225,17 +203,9 @@
 			float duration_ms = m_timer->stop(true);
 			float duration = duration_ms / 1000.0;
 			if(m_profiler){
-				switch(m_type){
-				case SPT_ADD:
-					m_profiler->add(m_name, duration);
-					break;
-				case SPT_AVG:
-					m_profiler->avg(m_name, duration);
-					break;
-				case SPT_GRAPH_ADD:
+				m_profiler->add(m_name, duration);
+				if (m_type == SPT_GRAPH_ADD)
 					m_profiler->graphAdd(m_name, duration);
-					break;
-				}
 			}
 			delete m_timer;
 		}
@@ -247,5 +217,10 @@
 	enum ScopeProfilerType m_type;
 };
 
+
+// Global profiler
+class Profiler;
+extern Profiler *g_profiler;
+
 #endif
 
